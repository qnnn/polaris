apiVersion: v1
data:
  polaris-server.yaml: |-
    # server启动引导配置
    bootstrap:
      # 全局日志
      logger:
        config:
          rotateOutputPath: log/runtime/polaris-config.log
          errorRotateOutputPath: log/runtime/polaris-config-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
          - stdout
          errorOutputPaths:
          - stderr
        auth:
          rotateOutputPath: log/runtime/polaris-auth.log
          errorRotateOutputPath: log/runtime/polaris-auth-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        store:
          rotateOutputPath: log/runtime/polaris-store.log
          errorRotateOutputPath: log/runtime/polaris-store-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        cache:
          rotateOutputPath: log/runtime/polaris-cache.log
          errorRotateOutputPath: log/runtime/polaris-cache-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        naming:
          rotateOutputPath: log/runtime/polaris-naming.log
          errorRotateOutputPath: log/runtime/polaris-naming-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        healthcheck:
          rotateOutputPath: log/runtime/polaris-healthcheck.log
          errorRotateOutputPath: log/runtime/polaris-healthcheck-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        xdsv3:
          rotateOutputPath: log/runtime/polaris-xdsv3.log
          errorRotateOutputPath: log/runtime/polaris-xdsv3-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        apiserver:
          rotateOutputPath: log/runtime/polaris-apiserver.log
          errorRotateOutputPath: log/runtime/polaris-apiserver-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        discoverEventLocal:
          rotateOutputPath: log/event/polaris-discoverevent.log
          errorRotateOutputPath: log/event/polaris-discoverevent-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        discoverLocal:
          rotateOutputPath: log/statis/polaris-discoverstat.log
          errorRotateOutputPath: log/statis/polaris-discoverstat-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        token-bucket:
          rotateOutputPath: log/runtime/polaris-ratelimit.log
          errorRotateOutputPath: log/runtime/polaris-ratelimit-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        local:
          rotateOutputPath: log/statis/polaris-statis.log
          errorRotateOutputPath: log/statis/polaris-statis-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        HistoryLogger:
          rotateOutputPath: log/operation/polaris-history.log
          errorRotateOutputPath: log/operation/polaris-history-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          rotationMaxDurationForHour: 24
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
        default:
          rotateOutputPath: log/runtime/polaris-default.log
          errorRotateOutputPath: log/runtime/polaris-default-error.log
          rotationMaxSize: 100
          rotationMaxBackups: 10
          rotationMaxAge: 7
          outputLevel: info
          outputPaths:
            - stdout
          errorOutputPaths:
            - stderr
      # 按顺序启动server
      startInOrder:
        open: true # 是否开启，默认是关闭
        key: sz # 全局锁
      # 注册为北极星服务
      polaris_service:
        probe_address: ##DB_ADDR##
        enable_register: true
        isolated: false
        services:
          - name: polaris.checker
            protocols:
              - service-grpc
    # apiserver配置
    apiservers:
      - name: service-eureka
        option:
          listenIP: "0.0.0.0"
          listenPort: 8761
          namespace: default
          owner: polaris
          refreshInterval: 10
          deltaExpireInterval: 60
          unhealthyExpireInterval: 180
          connLimit:
            openConnLimit: false
            maxConnPerHost: 1024
            maxConnLimit: 10240
            whiteList: 127.0.0.1
            purgeCounterInterval: 10s
            purgeCounterExpired: 5s
      - name: api-http # 协议名，全局唯一
        option:
          listenIP: "0.0.0.0"
          listenPort: 8090
          enablePprof: true # debug pprof
          enableSwagger: true # debug pprof
          connLimit:
            openConnLimit: false
            maxConnPerHost: 128
            maxConnLimit: 5120
            whiteList: 127.0.0.1
            purgeCounterInterval: 10s
            purgeCounterExpired: 5s
        api:
          admin:
            enable: true
          console:
            enable: true
            include: [default]
          client:
            enable: true
            include: [discover, register, healthcheck]
          config:
            enable: true
            include: [default]
      - name: service-grpc
        option:
          listenIP: "0.0.0.0"
          listenPort: 8091
          connLimit:
            openConnLimit: false
            maxConnPerHost: 128
            maxConnLimit: 5120
        api:
          client:
            enable: true
            include: [discover, register, healthcheck]
      - name: config-grpc
        option:
          listenIP: "0.0.0.0"
          listenPort: 8093
          connLimit:
            openConnLimit: false
            maxConnPerHost: 128
            maxConnLimit: 5120
        api:
          client:
            enable: true
      - name: xds-v3
        option:
          listenIP: "0.0.0.0"
          listenPort: 15010
          connLimit:
            openConnLimit: false
            maxConnPerHost: 128
            maxConnLimit: 10240
    #  - name: service-l5
    #    option:
    #      listenIP: 0.0.0.0
    #      listenPort: 7779
    #      clusterName: cl5.discover
    # Core logic configuration
    auth:
      # auth's option has migrated to auth.user and auth.strategy
      # it's still available when filling auth.option, but you will receive warning log that auth.option has deprecated.
      user:
        name: defaultUser
        option:
          # Token encrypted SALT, you need to rely on this SALT to decrypt the information of the Token when analyzing the Token
          # The length of SALT needs to satisfy the following one：len(salt) in [16, 24, 32]
          salt: polarismesh@2021
      strategy:
        name: defaultStrategy
        option:
          # Console power switch, open default
          consoleOpen: true
          # Customer inspection ability switch, default close
          clientOpen: false
    namespace:
      autoCreate: true
    naming:
      # 批量控制器
      batch:
        register:
          open: true
          queueSize: 10240
          waitTime: 32ms
          maxBatchCount: 32
          concurrency: 64
        deregister:
          open: true
          queueSize: 10240
          waitTime: 32ms
          maxBatchCount: 32
          concurrency: 64
        clientRegister:
          open: true
          queueSize: 10240
          waitTime: 32ms
          maxBatchCount: 32
          concurrency: 64
        clientDeregister:
          open: true
          queueSize: 10240
          waitTime: 32ms
          maxBatchCount: 32
          concurrency: 64
    # 配置中心模块启动配置
    config:
      # 是否启动配置模块
      open: true
    # 健康检查的配置
    healthcheck:
      open: true
      service: polaris.checker
      slotNum: 30
      minCheckInterval: 1s
      maxCheckInterval: 30s
      batch:
        heartbeat:
          open: true
          queueSize: 10240
          waitTime: 32ms
          maxBatchCount: 32
          concurrency: 64
      checkers:
        - name: heartbeatMemory
        # - name: heartbeatLeader
        #   option:
        #     soltNum: 128
        #     streamNum: 128 # default value is runtime.GOMAXPROCS(0)
        #     batch:
        #       queueSize: 16384
        #       waitTime: 32ms
        #       maxBatchCount: 64
        #       concurrency: 512
        # - name: heartbeatRedis
        #   option:
        #     kvAddr: ##REDIS_ADDR##
        #      # ACL user from redis v6.0, remove it if ACL is not available
        #     kvUser: ##REDIS_USER#
        #     kvPasswd: ##REDIS_PWD##
        #     poolSize: 200
        #     minIdleConns: 30
        #     idleTimeout: 120s
        #     connectTimeout: 200ms
        #     msgTimeout: 200ms
        #     concurrency: 200
        #     withTLS: false
    # 缓存配置
    cache:
      open: true
      resources:
        - name: service # Load service data
          option:
            disableBusiness: false # Do not load business services
            needMeta: true # Load service metadata
        - name: instance # Load instance data
          option:
            disableBusiness: false # Do not load business service examples
            needMeta: true # Load instance metadata
        - name: routingConfig # Load route data
        - name: rateLimitConfig # Load current limit data
        - name: circuitBreakerConfig # Load the fuse data
        - name: users # Load user and user group data
        - name: strategyRule # Loading the rules of appraisal
        - name: namespace # Load the naming space data
        - name: client # Load Client-SDK instance data
        - name: configFile
        - name: configGroup
        - name: faultDetectRule
    #    - name: l5 # 加载l5数据
    # Maintain configuration
    maintain:
      jobs:
        # Clean up long term unhealthy instance
        - name: DeleteUnHealthyInstance
          enable: false
          option:
            # Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
            instanceDeleteTimeout: 60m
        # Delete auto-created service without an instance
        - name: DeleteEmptyAutoCreatedService
          enable: false
          option:
            # Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
            serviceDeleteTimeout: 30m
        # Clean soft deleted instances
        - name: CleanDeletedInstances
          enable: true
          option:
            # Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
            # instanceCleanTimeout: 10m
        # Clean soft deleted clients
        - name: CleanDeletedClients
          enable: true
          option:
            # Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
            # clientCleanTimeout: 10m
    # 存储配置
    store:
      # 单机文件存储插件
      name: boltdbStore
      option:
        path: ./polaris.bolt
      ## 数据库存储插件
      # name: defaultStore
      # option:
      #   master:
      #     dbType: mysql
      #     dbName: polaris_server
      #     dbUser: ##DB_USER##
      #     dbPwd: ##DB_PWD##
      #     dbAddr: ##DB_ADDR##
      #     maxOpenConns: -1
      #     maxIdleConns: -1
      #     connMaxLifetime: 300 # 单位秒
      #     txIsolationLevel: 2 #LevelReadCommitted
    # 插件配置
    plugin:
      history:
        entries:
          - name: HistoryLogger
      discoverEvent:
        entries:
          - name: discoverEventLocal
      discoverStatis:
        name: discoverLocal
        option:
          interval: 60 # 统计间隔，单位为秒
          outputPath: ./discover-statis
      statis:
        entries:
          - name: local
            option:
              interval: 60
          - name: prometheus
      ratelimit:
        name: token-bucket
        option:
          remote-conf: false # 是否使用远程配置
          ip-limit: # ip级限流，全局
            open: false # 系统是否开启ip级限流
            global:
              open: false
              bucket: 300 # 最高峰值
              rate: 200 # 平均一个IP每秒的请求数
            resource-cache-amount: 1024 # 最大缓存的IP个数
            white-list: [127.0.0.1]
          instance-limit:
            open: false
            global:
              bucket: 200
              rate: 100
            resource-cache-amount: 1024
          api-limit: # 接口级限流
            open: false # 是否开启接口限流，全局开关，只有为true，才代表系统的限流开启。默认关闭
            rules:
              - name: store-read
                limit:
                  open: false # 接口的全局配置，如果在api子项中，不配置，则该接口依据global来做限制
                  bucket: 2000 # 令牌桶最大值
                  rate: 1000 # 每秒产生的令牌数
              - name: store-write
                limit:
                  open: false
                  bucket: 1000
                  rate: 500
            apis:
              - name: "POST:/v1/naming/services"
                rule: store-write
              - name: "PUT:/v1/naming/services"
                rule: store-write
              - name: "POST:/v1/naming/services/delete"
                rule: store-write
              - name: "GET:/v1/naming/services"
                rule: store-read
              - name: "GET:/v1/naming/services/count"
                rule: store-read

kind: ConfigMap
metadata:
  name: polaris-server-config
  namespace: polaris-system
